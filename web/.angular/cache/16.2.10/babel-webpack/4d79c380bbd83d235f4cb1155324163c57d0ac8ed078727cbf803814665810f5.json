{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/register.service\";\nfunction RegisterComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Les mots de passe ne sont pas identiques\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class RegisterComponent {\n  constructor(fb, router, registerService) {\n    this.fb = fb;\n    this.router = router;\n    this.registerService = registerService;\n  }\n  ngOnInit() {\n    const passwordMatchValidator = control => {\n      const password = control.get('password')?.value;\n      const passwordRepeat = control.get('password_repeat')?.value;\n      return password === passwordRepeat ? null : {\n        passwordsNotMatch: true\n      };\n    };\n    this.registerForm = this.fb.group({\n      identifiant: ['', Validators.required],\n      password: ['', [Validators.required]],\n      password_repeat: ['', [Validators.required]],\n      selectedRole: ['USER', Validators.required]\n    }, {\n      validators: passwordMatchValidator\n    });\n  }\n  onSubmit() {\n    if (this.registerForm.valid) {\n      const finalData = {\n        identifiant: this.registerForm.value.identifiant,\n        password: this.registerForm.value.password,\n        role: this.registerForm.get('selectedRole')?.value\n      };\n      this.registerService.Register(localStorage.getItem('authToken'), finalData).subscribe(response => {\n        alert('Compte crée');\n        this.router.navigate(['/add-mechanical-sheet']);\n      }, error => {\n        console.log(localStorage.getItem('authToken'), finalData);\n        console.error('Creation failed', error);\n        alert(\"Erreur de création, vérifier que l'utilisateur n'existe pas\");\n      });\n    } else {\n      alert('Formulaire invalide');\n    }\n  }\n  static #_ = this.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.RegisterService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 27,\n    vars: 3,\n    consts: [[1, \"row\", \"g-3\", 3, \"formGroup\"], [1, \"col-md-6\"], [\"for\", \"inputId\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"inputId\", \"formControlName\", \"identifiant\", 1, \"form-control\"], [\"for\", \"inputPassword\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"inputPassword\", \"formControlName\", \"password\", 1, \"form-control\"], [\"for\", \"inputPasswordRepeat\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"inputPasswordRepeat\", \"formControlName\", \"password_repeat\", 1, \"form-control\"], [4, \"ngIf\"], [\"id\", \"select\", 1, \"col-md-6\"], [\"for\", \"role\", 1, \"form-label\"], [\"id\", \"role\", \"formControlName\", \"selectedRole\"], [\"value\", \"USER\", \"selected\", \"\"], [\"value\", \"MANAGER\"], [\"value\", \"ADMIN\"], [1, \"col-12\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"label\", 2);\n        i0.ɵɵtext(3, \"Identifiant\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 1)(6, \"label\", 4);\n        i0.ɵɵtext(7, \"Mot de passe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 1)(10, \"label\", 6);\n        i0.ɵɵtext(11, \"R\\u00E9p\\u00E9ter le mot de passe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 7);\n        i0.ɵɵtemplate(13, RegisterComponent_div_13_Template, 2, 0, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 9)(15, \"label\", 10);\n        i0.ɵɵtext(16, \"R\\u00F4le\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"select\", 11)(18, \"option\", 12);\n        i0.ɵɵtext(19, \"Utilisateur\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"option\", 13);\n        i0.ɵɵtext(21, \"Manager\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"option\", 14);\n        i0.ɵɵtext(23, \"Administrateur\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(24, \"div\", 15)(25, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_25_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵtext(26, \"Cr\\u00E9ation du compte\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx.registerForm.get(\"password_repeat\")) == null ? null : tmp_1_0.hasError(\"passwordsNotMatch\"));\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"disabled\", !ctx.registerForm.valid);\n      }\n    },\n    styles: [\"form[_ngcontent-%COMP%] {\\n  margin: 15%;\\n}\\n\\nbutton[_ngcontent-%COMP%] {\\n  background-color: #012061;\\n  border-color: #012061;\\n}\\n\\nbutton[_ngcontent-%COMP%]:hover {\\n  background-color: #000c25;\\n  border-color: #000c25;\\n}\\n\\nbutton[_ngcontent-%COMP%]:active {\\n  background-color: #000c25 !important;\\n  border-color: #000c25 !important;\\n}\\n\\n#select[_ngcontent-%COMP%] {\\n  display: grid;\\n}\\n\\nselect[_ngcontent-%COMP%] {\\n  width: 140px;\\n  height: 35px;\\n  padding: 4px;\\n  border-radius: 4px;\\n  background: rgb(230, 230, 230);\\n  border: none;\\n  outline: none;\\n  display: inline-block;\\n  appearance: none;\\n  cursor: pointer;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0Usb0NBQW9DO0VBQ3BDLGdDQUFnQztBQUNsQzs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLFlBQVk7RUFDWixZQUFZO0VBQ1osWUFBWTtFQUNaLGtCQUFrQjtFQUNsQiw4QkFBOEI7RUFDOUIsWUFBWTtFQUNaLGFBQWE7RUFDYixxQkFBcUI7RUFHckIsZ0JBQWdCO0VBQ2hCLGVBQWU7QUFDakIiLCJzb3VyY2VzQ29udGVudCI6WyJmb3JtIHtcbiAgbWFyZ2luOiAxNSU7XG59XG5cbmJ1dHRvbiB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMwMTIwNjE7XG4gIGJvcmRlci1jb2xvcjogIzAxMjA2MTtcbn1cblxuYnV0dG9uOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMGMyNTtcbiAgYm9yZGVyLWNvbG9yOiAjMDAwYzI1O1xufVxuXG5idXR0b246YWN0aXZlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMGMyNSAhaW1wb3J0YW50O1xuICBib3JkZXItY29sb3I6ICMwMDBjMjUgIWltcG9ydGFudDtcbn1cblxuI3NlbGVjdCB7XG4gIGRpc3BsYXk6IGdyaWQ7XG59XG5cbnNlbGVjdCB7XG4gIHdpZHRoOiAxNDBweDtcbiAgaGVpZ2h0OiAzNXB4O1xuICBwYWRkaW5nOiA0cHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgYmFja2dyb3VuZDogcmdiKDIzMCwgMjMwLCAyMzApO1xuICBib3JkZXI6IG5vbmU7XG4gIG91dGxpbmU6IG5vbmU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XG4gIGFwcGVhcmFuY2U6IG5vbmU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","RegisterComponent","constructor","fb","router","registerService","ngOnInit","passwordMatchValidator","control","password","get","value","passwordRepeat","passwordsNotMatch","registerForm","group","identifiant","required","password_repeat","selectedRole","validators","onSubmit","valid","finalData","role","Register","localStorage","getItem","subscribe","response","alert","navigate","error","console","log","_","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","i3","RegisterService","_2","selectors","decls","vars","consts","template","RegisterComponent_Template","rf","ctx","ɵɵelement","ɵɵtemplate","RegisterComponent_div_13_Template","ɵɵlistener","RegisterComponent_Template_button_click_25_listener","ɵɵproperty","ɵɵadvance","tmp_1_0","hasError"],"sources":["C:\\Users\\ANAS\\Desktop\\pri5\\PRI\\web\\src\\app\\register\\register.component.ts","C:\\Users\\ANAS\\Desktop\\pri5\\PRI\\web\\src\\app\\register\\register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { RegisterService } from '../services/register.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit {\n  registerForm!: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private registerService: RegisterService\n  ) {}\n\n  ngOnInit(): void {\n    const passwordMatchValidator: ValidatorFn = (\n      control: AbstractControl\n    ): ValidationErrors | null => {\n      const password = control.get('password')?.value;\n      const passwordRepeat = control.get('password_repeat')?.value;\n\n      return password === passwordRepeat ? null : { passwordsNotMatch: true };\n    };\n\n    this.registerForm = this.fb.group(\n      {\n        identifiant: ['', Validators.required],\n        password: ['', [Validators.required]],\n        password_repeat: ['', [Validators.required]],\n        selectedRole: ['USER', Validators.required],\n      },\n      { validators: passwordMatchValidator }\n    );\n  }\n\n  onSubmit() {\n    if (this.registerForm.valid) {\n      const finalData = {\n        identifiant: this.registerForm.value.identifiant,\n        password: this.registerForm.value.password,\n        role: this.registerForm.get('selectedRole')?.value,\n      };\n\n      this.registerService\n        .Register(localStorage.getItem('authToken'), finalData)\n        .subscribe(\n          (response) => {\n            alert('Compte crée');\n            this.router.navigate(['/add-mechanical-sheet']);\n          },\n          (error) => {\n            console.log(localStorage.getItem('authToken'), finalData);\n            console.error('Creation failed', error);\n            alert(\n              \"Erreur de création, vérifier que l'utilisateur n'existe pas\"\n            );\n          }\n        );\n    } else {\n      alert('Formulaire invalide');\n    }\n  }\n}\n","<form class=\"row g-3\" [formGroup]=\"registerForm\">\n    <div class=\"col-md-6\">\n        <label for=\"inputId\" class=\"form-label\">Identifiant</label>\n        <input type=\"text\" class=\"form-control\" id=\"inputId\" formControlName=\"identifiant\">\n    </div>\n    <div class=\"col-md-6\">\n        <label for=\"inputPassword\" class=\"form-label\">Mot de passe</label>\n        <input type=\"password\" class=\"form-control\" id=\"inputPassword\" formControlName=\"password\">\n    </div>\n    <div class=\"col-md-6\">\n        <label for=\"inputPasswordRepeat\" class=\"form-label\">Répéter le mot de passe</label>\n        <input type=\"password\" class=\"form-control\" id=\"inputPasswordRepeat\" formControlName=\"password_repeat\">\n        <div *ngIf=\"registerForm.get('password_repeat')?.hasError('passwordsNotMatch')\">Les mots de passe ne sont pas\n            identiques</div>\n    </div>\n    <div class=\"col-md-6\" id=\"select\">\n        <label for=\"role\" class=\"form-label\">Rôle</label>\n        <select id=\"role\" formControlName=\"selectedRole\">\n            <option value=\"USER\" selected>Utilisateur</option>\n            <option value=\"MANAGER\">Manager</option>\n            <option value=\"ADMIN\">Administrateur</option>\n        </select>\n    </div>\n\n    <div class=\"col-12\">\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onSubmit()\" [disabled]=\"!registerForm.valid\">Création du\n            compte</button>\n    </div>\n</form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}