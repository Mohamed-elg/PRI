{"ast":null,"code":"import { catchError, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.loginUrl = 'http://localhost:8081/api/account/auth';\n  }\n  login(credentials) {\n    return this.http.post(this.loginUrl, credentials).pipe(tap(response => {\n      this.setAuth(response);\n    }), catchError(error => {\n      console.error('Login failed', error);\n      throw error;\n    }));\n  }\n  setAuth(response) {\n    localStorage.setItem('authToken', response.token);\n    localStorage.setItem('userRole', response.role);\n  }\n  logout() {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userRole');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('authToken');\n  }\n  isAdmin() {\n    return localStorage.getItem('userRole') == 'ADMIN';\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","tap","AuthService","constructor","http","loginUrl","login","credentials","post","pipe","response","setAuth","error","console","localStorage","setItem","token","role","logout","removeItem","isLoggedIn","getItem","isAdmin","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ANAS\\Desktop\\pri5\\PRI\\web\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, catchError, tap } from 'rxjs';\n\ninterface LoginResponse {\n  role: string;\n  identifiant: string;\n  message: string;\n  token: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private readonly loginUrl = 'http://localhost:8081/api/account/auth';\n\n  constructor(private http: HttpClient) {}\n\n  login(credentials: {\n    identidiant: string;\n    pasword: string;\n  }): Observable<LoginResponse> {\n    return this.http.post<LoginResponse>(this.loginUrl, credentials).pipe(\n      tap((response: LoginResponse) => {\n        this.setAuth(response);\n      }),\n      catchError((error) => {\n        console.error('Login failed', error);\n        throw error;\n      })\n    );\n  }\n\n  private setAuth(response: LoginResponse): void {\n    localStorage.setItem('authToken', response.token);\n    localStorage.setItem('userRole', response.role);\n  }\n\n  logout(): void {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userRole');\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('authToken');\n  }\n\n  isAdmin(): boolean {\n    return localStorage.getItem('userRole') == 'ADMIN';\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,EAAEC,GAAG,QAAQ,MAAM;;;AAYlD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,QAAQ,GAAG,wCAAwC;EAE7B;EAEvCC,KAAKA,CAACC,WAGL;IACC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAgB,IAAI,CAACH,QAAQ,EAAEE,WAAW,CAAC,CAACE,IAAI,CACnER,GAAG,CAAES,QAAuB,IAAI;MAC9B,IAAI,CAACC,OAAO,CAACD,QAAQ,CAAC;IACxB,CAAC,CAAC,EACFV,UAAU,CAAEY,KAAK,IAAI;MACnBC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEQD,OAAOA,CAACD,QAAuB;IACrCI,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEL,QAAQ,CAACM,KAAK,CAAC;IACjDF,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEL,QAAQ,CAACO,IAAI,CAAC;EACjD;EAEAC,MAAMA,CAAA;IACJJ,YAAY,CAACK,UAAU,CAAC,WAAW,CAAC;IACpCL,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC;EACrC;EAEAC,UAAUA,CAAA;IACR,OAAO,CAAC,CAACN,YAAY,CAACO,OAAO,CAAC,WAAW,CAAC;EAC5C;EAEAC,OAAOA,CAAA;IACL,OAAOR,YAAY,CAACO,OAAO,CAAC,UAAU,CAAC,IAAI,OAAO;EACpD;EAAC,QAAAE,CAAA,G;qBApCUrB,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX1B,WAAW;IAAA2B,OAAA,EAAX3B,WAAW,CAAA4B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}